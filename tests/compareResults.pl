#!/usr/bin/perl
#
#  This script will compare the results between the miniXyce generated *.prn files
#  for the test circuits in the 'tests' directory and gold standard files generated by Xyce.
#

# Check input arguments for path
#       $ARGV[0] = path to this script and test circuits
#
$path = '';
if (@ARGV >= 1) {
  $path = $ARGV[0];
}

@mXtests = qw( cir1 cir2 cir3 cir4 );
$numtests = @mXtests;
$tol = 1e-8;

foreach (@mXtests)
{
  # Determine next simulation output file to check
  $prnfile = $path . $_ . '_tran_results.prn';

  # If this file exists compare it to the gold standard file
  if (-e $prnfile)
  {    
    # This output file exists, so compare it
    print "\nCHECKING RESULTS FOR TEST: $_.net\n";

    # Generate the name of the gold standard for this file
    $goldfile = $path . './goldStandards/' . $_ . '.net.prn';
    
    # Open these files
    open(MX,$prnfile) || die "cannot open $prnfile for reading: $!\n";
    open(GOLD,$goldfile) || die "cannot open $goldfile for reading: $!\n";

    # Load the files into an array
    my @mXresult = <MX>;
    my @goldresult = <GOLD>;

    # Get the number of lines in each file, the Xyce file is expected to have an additional line at the end
    $resultlines = @mXresult;
    $goldlines = @goldresult;
    if ($goldlines-1 != $resultlines)
    {
      print "$prnfile and $goldfile cannot be compared, files have incompatible length!\n";
      close(MX);
      close(GOLD);
      next;
    }
    
    # Next check, compare the number of voltage nodes
    $mXvoltagevars = 0;
    $xycevoltagevars = 0;
    @nodenames = ();
    my @values = split(" ",$goldresult[0]);
    foreach my $val (@values) {
      if ( $val =~ /^V/ ) {
        $xycevoltagevars++;
      }
    } 
    my @values = split(" ",$mXresult[0]);
    foreach my $val (@values) {
      if ( $val =~ /^V/ ) {
        $mXvoltagevars++;
        push(@nodenames,$val);
      }
    }
    if ($mXvoltagevars != $xycevoltagevars) {
      die "Different number of voltage variables for $prnfile and $goldfile!\n";
    }

    # Next check, make sure initial step and step size is the same
    $steps = $resultlines - 1;
    my @mXvalues = split(" ",$mXresult[1]);
    my @xycevalues = split(" ",$goldresult[1]);

    if ($mXvalues[0] != $xycevalues[1]) {
      die "Initial time integration value is not the same for $prnfile and $goldfile!\n";
    }

    my @mXvalues = split(" ",$mXresult[2]);
    my @xycevalues = split(" ",$goldresult[2]);
   
    if ($mXvalues[0] != $xycevalues[1]) {
      die "Time integration step size is not the same for $prnfile and $goldfile!\n";
    }
    $stepsize = $mXvalues[0];
    $tmpsteps = $steps-1;
    print "Number of time steps: $tmpsteps\n";
    print "Time integration step size is: $stepsize\n";

    # Initialize a vector of zeros for computing the error
    @err = (); 
    for ($node=0;$node<$mXvoltagevars;$node++) { 
      push(@err,0.0);
    }
 
    for ($i=0;$i<$steps;$i++) {
      my @mXvalues = split(" ",$mXresult[$i+1]);
      my @xycevalues = split(" ",$goldresult[$i+1]);

      for ($node=0;$node<$mXvoltagevars;$node++) {
        $err[$node] = $err[$node] + abs($mXvalues[$node+1]-$xycevalues[$node+2])*$stepsize;
      }
    }

    # Output error between computed voltages and gold standard voltages
    $passed = 1;
    for ($node=0;$node<$mXvoltagevars;$node++) {
      $err[$node] /= $steps-1; 
      print "Voltage node $nodenames[$node] error: $err[$node] --> ";   
      if ($err[$node] > $tol) {
         $passed = 0;
         print "FAILED\n";
      }
      else {
         print "passed\n";
      }
    }

    if ($passed != 1) {
      print "Voltage comparison of $prnfile and $goldfile did not meet acceptable tolerances ($tol), test failed!"
    }    
    print "\n";
 
    close(MX);
    close(GOLD);
  }
}
